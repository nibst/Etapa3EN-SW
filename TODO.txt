#TODO, marcar com X o que completar
[] 1. Inserir strings na DB em lower case sempre, facilitar as queries. Ou então usar LOWER dentro das queries
[] 3. Criar classe de excecoes especificas para cada excecao
[X] 4. Utilizar a tabela de lista de participantes na DB na hora de montar um novo objeto de Evento a partir da DB
[] 5. Talvez fazer uma classe/wrapper de usuáriio que chama as funçoes da application. O motivo disso é que podemos
      controlar as restrições que um usuário possa ter. Ex: um usuário deslogado não pode criar Eventos
[X] 6. Testar função de get_user_by_email, e as mudanças que fiz no dia 13/9-14/9
[] 7. Especifique uma interface para cada camada
[] 8. Padronizar nome de metodos de services, talvez ter abstract service
[X] 10. Transformar classe Address para dataclass, manter o padrão
[X] 11. Testar Login
[X] 12. Quando pegar da DB para objeto Event, fazer host ser User e address ser Address (no momento sao so id)
[] 13. TODOS espalhados pelo codigo
[X] 14. Joins nas consultas de evento
[X] 15. Rollbacks quando falha DB
[X] 16. URGENTE: ARRUMAR QUERIES DO EVENT DAO, o join de eventos com participantes faz com que eventos que ainda nao
possuam participantes, acabem por não aparecer na consulta. Outros problemas tambem
[X] 17. Pq diabos passo um db connection pro DAO, só chama DB.get_instance la dentro uai.
[] 18. Flask ja tem uma lib de acesso de DB, considerar trocar ela ao inves de usar psycopg2?
[] 19. Rever especificacao, sera que devo dar errro se eh criado evento privado sem participantes?
[] 20. Colocar event_validation em uma classe
[] 21. Abstract DAOS - AbstractDAO de event,de user,etc. Terá duas impl da abstract class, uma seria a default e outra seria uma mock class. 
A mock seria uma classe simulando DAO para os services, assim sem usar a DB.
[] 22. User ter uma lista de eventos que ele possui (é host) e lista dos eventos que ele participa
----Principais----
[] 1. Validar check in/check out
[] 2. Gerar QRCode
[] 3. Gerar certificado